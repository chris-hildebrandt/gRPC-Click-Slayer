// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: click.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MonsterSlayer_JoinGame_FullMethodName          = "/monsterslayer.MonsterSlayer/JoinGame"
	MonsterSlayer_AttackMonster_FullMethodName     = "/monsterslayer.MonsterSlayer/AttackMonster"
	MonsterSlayer_StreamGameUpdates_FullMethodName = "/monsterslayer.MonsterSlayer/StreamGameUpdates"
)

// MonsterSlayerClient is the client API for MonsterSlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonsterSlayerClient interface {
	// Join the game
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	// Attack the monster
	AttackMonster(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error)
	// Stream game updates (real-time leaderboard, monster health, etc.)
	StreamGameUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MonsterSlayer_StreamGameUpdatesClient, error)
}

type monsterSlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonsterSlayerClient(cc grpc.ClientConnInterface) MonsterSlayerClient {
	return &monsterSlayerClient{cc}
}

func (c *monsterSlayerClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, MonsterSlayer_JoinGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterSlayerClient) AttackMonster(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error) {
	out := new(AttackResponse)
	err := c.cc.Invoke(ctx, MonsterSlayer_AttackMonster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterSlayerClient) StreamGameUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MonsterSlayer_StreamGameUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonsterSlayer_ServiceDesc.Streams[0], MonsterSlayer_StreamGameUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &monsterSlayerStreamGameUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonsterSlayer_StreamGameUpdatesClient interface {
	Recv() (*GameUpdate, error)
	grpc.ClientStream
}

type monsterSlayerStreamGameUpdatesClient struct {
	grpc.ClientStream
}

func (x *monsterSlayerStreamGameUpdatesClient) Recv() (*GameUpdate, error) {
	m := new(GameUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonsterSlayerServer is the server API for MonsterSlayer service.
// All implementations must embed UnimplementedMonsterSlayerServer
// for forward compatibility
type MonsterSlayerServer interface {
	// Join the game
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	// Attack the monster
	AttackMonster(context.Context, *AttackRequest) (*AttackResponse, error)
	// Stream game updates (real-time leaderboard, monster health, etc.)
	StreamGameUpdates(*emptypb.Empty, MonsterSlayer_StreamGameUpdatesServer) error
	mustEmbedUnimplementedMonsterSlayerServer()
}

// UnimplementedMonsterSlayerServer must be embedded to have forward compatible implementations.
type UnimplementedMonsterSlayerServer struct {
}

func (UnimplementedMonsterSlayerServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedMonsterSlayerServer) AttackMonster(context.Context, *AttackRequest) (*AttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttackMonster not implemented")
}
func (UnimplementedMonsterSlayerServer) StreamGameUpdates(*emptypb.Empty, MonsterSlayer_StreamGameUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameUpdates not implemented")
}
func (UnimplementedMonsterSlayerServer) mustEmbedUnimplementedMonsterSlayerServer() {}

// UnsafeMonsterSlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonsterSlayerServer will
// result in compilation errors.
type UnsafeMonsterSlayerServer interface {
	mustEmbedUnimplementedMonsterSlayerServer()
}

func RegisterMonsterSlayerServer(s grpc.ServiceRegistrar, srv MonsterSlayerServer) {
	s.RegisterService(&MonsterSlayer_ServiceDesc, srv)
}

func _MonsterSlayer_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterSlayerServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonsterSlayer_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterSlayerServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonsterSlayer_AttackMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterSlayerServer).AttackMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonsterSlayer_AttackMonster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterSlayerServer).AttackMonster(ctx, req.(*AttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonsterSlayer_StreamGameUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonsterSlayerServer).StreamGameUpdates(m, &monsterSlayerStreamGameUpdatesServer{stream})
}

type MonsterSlayer_StreamGameUpdatesServer interface {
	Send(*GameUpdate) error
	grpc.ServerStream
}

type monsterSlayerStreamGameUpdatesServer struct {
	grpc.ServerStream
}

func (x *monsterSlayerStreamGameUpdatesServer) Send(m *GameUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// MonsterSlayer_ServiceDesc is the grpc.ServiceDesc for MonsterSlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonsterSlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monsterslayer.MonsterSlayer",
	HandlerType: (*MonsterSlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _MonsterSlayer_JoinGame_Handler,
		},
		{
			MethodName: "AttackMonster",
			Handler:    _MonsterSlayer_AttackMonster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameUpdates",
			Handler:       _MonsterSlayer_StreamGameUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "click.proto",
}
