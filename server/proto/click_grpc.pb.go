// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: click.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClickRace_SendClicks_FullMethodName     = "/clickrace.ClickRace/SendClicks"
	ClickRace_GetLeaderboard_FullMethodName = "/clickrace.ClickRace/GetLeaderboard"
)

// ClickRaceClient is the client API for ClickRace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickRaceClient interface {
	// Player sends clicks (client stream → single response)
	SendClicks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Click, Score], error)
	// All players subscribe to leaderboard (server stream)
	GetLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Leaderboard], error)
}

type clickRaceClient struct {
	cc grpc.ClientConnInterface
}

func NewClickRaceClient(cc grpc.ClientConnInterface) ClickRaceClient {
	return &clickRaceClient{cc}
}

func (c *clickRaceClient) SendClicks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Click, Score], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClickRace_ServiceDesc.Streams[0], ClickRace_SendClicks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Click, Score]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickRace_SendClicksClient = grpc.ClientStreamingClient[Click, Score]

func (c *clickRaceClient) GetLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Leaderboard], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClickRace_ServiceDesc.Streams[1], ClickRace_GetLeaderboard_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Leaderboard]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickRace_GetLeaderboardClient = grpc.ServerStreamingClient[Leaderboard]

// ClickRaceServer is the server API for ClickRace service.
// All implementations must embed UnimplementedClickRaceServer
// for forward compatibility.
type ClickRaceServer interface {
	// Player sends clicks (client stream → single response)
	SendClicks(grpc.ClientStreamingServer[Click, Score]) error
	// All players subscribe to leaderboard (server stream)
	GetLeaderboard(*emptypb.Empty, grpc.ServerStreamingServer[Leaderboard]) error
	mustEmbedUnimplementedClickRaceServer()
}

// UnimplementedClickRaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClickRaceServer struct{}

func (UnimplementedClickRaceServer) SendClicks(grpc.ClientStreamingServer[Click, Score]) error {
	return status.Errorf(codes.Unimplemented, "method SendClicks not implemented")
}
func (UnimplementedClickRaceServer) GetLeaderboard(*emptypb.Empty, grpc.ServerStreamingServer[Leaderboard]) error {
	return status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedClickRaceServer) mustEmbedUnimplementedClickRaceServer() {}
func (UnimplementedClickRaceServer) testEmbeddedByValue()                   {}

// UnsafeClickRaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickRaceServer will
// result in compilation errors.
type UnsafeClickRaceServer interface {
	mustEmbedUnimplementedClickRaceServer()
}

func RegisterClickRaceServer(s grpc.ServiceRegistrar, srv ClickRaceServer) {
	// If the following call pancis, it indicates UnimplementedClickRaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClickRace_ServiceDesc, srv)
}

func _ClickRace_SendClicks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClickRaceServer).SendClicks(&grpc.GenericServerStream[Click, Score]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickRace_SendClicksServer = grpc.ClientStreamingServer[Click, Score]

func _ClickRace_GetLeaderboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClickRaceServer).GetLeaderboard(m, &grpc.GenericServerStream[emptypb.Empty, Leaderboard]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickRace_GetLeaderboardServer = grpc.ServerStreamingServer[Leaderboard]

// ClickRace_ServiceDesc is the grpc.ServiceDesc for ClickRace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickRace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clickrace.ClickRace",
	HandlerType: (*ClickRaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendClicks",
			Handler:       _ClickRace_SendClicks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLeaderboard",
			Handler:       _ClickRace_GetLeaderboard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "click.proto",
}
